{"ast":null,"code":"import _objectSpread from \"/Users/evik/Documents/GitHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/evik/Documents/GitHub/frontend/src/App.js\";\nimport React, { Component } from 'react'; //import SavedList from './Movies/SavedList';\n\nimport StudentsList from './StudentsList'; //import Movie from './Movies/Movie';\n\nimport { Route, Link } from 'react-router-dom';\nimport StudentListData from './studentlist.json';\nimport './App.css';\nimport StudentsDetails from './StudentsDetails';\nimport Login from './Login';\nimport PrivateRoute from './PrivateRoute';\nimport Signup from './Signup';\nimport Auth from './AuthService';\nconst apiRoot = 'https://betterprofessor.herokuapp.com/api';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.postStudent = student => {\n      const students = this.state.students;\n      students.push(_objectSpread({}, student, {\n        id: new Date(),\n        projects: []\n      }));\n      this.setState({\n        students\n      });\n    };\n\n    this.setSelected = (studentId, selected) => {\n      console.log(selected);\n\n      if (selected) {\n        const selectedStudents = this.state.selected.concat(studentId);\n        this.setState({\n          selected: selectedStudents\n        });\n      } else {\n        const comparedStudents = this.state.selected.filter(x => x != studentId);\n        this.setState({\n          selected: comparedStudents\n        });\n      }\n    };\n\n    this.studentDeleted = () => {\n      this.setState(state => {\n        const listOfSaved = state.students.filter(student => {\n          if (state.selected.indexOf(student.student_id) != -1) return false;\n          return true;\n        });\n        return {\n          students: listOfSaved,\n          selected: []\n        };\n      });\n    };\n\n    this.getStudent = id => {\n      const singleStudent = this.state.students.filter(student => student.student_id == id);\n      console.log(singleStudent);\n      return singleStudent[0];\n    };\n\n    this.state = {\n      students: [],\n      selected: []\n    };\n  }\n\n  componentDidMount() {\n    Auth.fetch(\"/professor-student-info\", {\n      method: 'GET',\n      body: ''\n    }).get('http://localhost:5000/api/professor-student-info').then(response => {\n      this.setState(() => ({\n        students: StudentListData\n      }));\n    }).catch(error => {\n      console.error('Server Error', error);\n    });\n  } // addToSavedList = movie => {\n  //   const savedList = this.state.savedList;\n  //   savedList.push(movie);\n  //   this.setState({ savedList });\n  // };\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      component: Login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      component: Signup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"second\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(PrivateRoute, {\n      exact: true,\n      path: \"/\",\n      render: props => React.createElement(StudentsList, Object.assign({}, props, {\n        data: this.state.students,\n        postStudent: this.postStudent,\n        selectedStudents: this.state.selected,\n        setSelected: this.setSelected,\n        deleted: this.studentDeleted,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(PrivateRoute, {\n      path: \"/student/:id\",\n      render: ({\n        match\n      }) => React.createElement(StudentsDetails, {\n        student: this.getStudent(match.params.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/evik/Documents/GitHub/frontend/src/App.js"],"names":["React","Component","StudentsList","Route","Link","StudentListData","StudentsDetails","Login","PrivateRoute","Signup","Auth","apiRoot","App","constructor","props","postStudent","student","students","state","push","id","Date","projects","setState","setSelected","studentId","selected","console","log","selectedStudents","concat","comparedStudents","filter","x","studentDeleted","listOfSaved","indexOf","student_id","getStudent","singleStudent","componentDidMount","fetch","method","body","get","then","response","catch","error","render","match","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n//import SavedList from './Movies/SavedList';\nimport StudentsList from './StudentsList';\n//import Movie from './Movies/Movie';\nimport { Route, Link } from 'react-router-dom';\nimport StudentListData from  './studentlist.json';\nimport './App.css'\nimport StudentsDetails from './StudentsDetails';\nimport Login from './Login';\nimport PrivateRoute from './PrivateRoute';\nimport Signup from './Signup';\nimport Auth from './AuthService';\n\n\nconst apiRoot = 'https://betterprofessor.herokuapp.com/api';\n  \n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      students: [], \n      selected: []\n    };\n  }\n\n\n      componentDidMount() {\n          Auth.fetch (`/professor-student-info`, {\n            method: 'GET',\n            body: ''\n        })\n          .get('http://localhost:5000/api/professor-student-info')\n          .then(response => {\n          this.setState(() => ({ students: StudentListData }));\n       })\n       .catch(error => {\n         console.error('Server Error', error);\n       });\n    }\n  \n\n  // addToSavedList = movie => {\n  //   const savedList = this.state.savedList;\n  //   savedList.push(movie);\n  //   this.setState({ savedList });\n  // };\n  postStudent = (student) => {\n    const students = this.state.students;\n    students.push({...student, id: new Date, projects: []});\n    this.setState({ students });\n  }\n  setSelected = (studentId, selected) => {\n    console.log(selected)\n    if (selected) {\n    const selectedStudents =  this.state.selected.concat (studentId);\n    this.setState ({selected: selectedStudents});\n    }\n    else {const comparedStudents = this.state.selected.filter(x => x != studentId);\n    this.setState ({selected: comparedStudents});\n  }\n}\n  studentDeleted = () => {\n    this.setState ((state) =>{\n      const listOfSaved = state.students.filter((student) => {\n        if (state.selected.indexOf(student.student_id) != -1)\n          return false;\n        return true;\n      });\n\n  \n\n      return ( {\n        students: listOfSaved,\n        selected: []\n      } )\n\n    })\n  }\n  getStudent = (id) => {\n   const singleStudent = this.state.students.filter (student => student.student_id == id) \n      console.log(singleStudent);\n   return singleStudent[0];\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        {/* <SavedList list={this.state.savedList} /> */}\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signup\" component={Signup}/>\n        <div className=\"second\">\n        <PrivateRoute  exact path='/' render={(props) => <StudentsList {...props} \n                data={this.state.students} \n                postStudent={this.postStudent}\n                selectedStudents={this.state.selected}\n                setSelected={this.setSelected}\n                deleted={this.studentDeleted}\n                />}\n         />\n\n       <PrivateRoute path= '/student/:id' render={({match}) => <StudentsDetails student={this.getStudent(match.params.id)}/> }\n        />\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}