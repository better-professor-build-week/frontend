{"ast":null,"code":"import _objectSpread from \"/Users/evik/Documents/GitHub/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport decode from 'jwt-decode';\n\nclass AuthService {\n  constructor(apiRoot) {\n    this.apiRoot = apiRoot || 'https://better-profess.herokuapp.com/';\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(username, password) {\n    return this.fetch(\"\".concat(this.apiRoot, \"/login\"), {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token);\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n  }\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n  _checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {} else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}\n\nconst Auth = new AuthService();\nexport default Auth;","map":{"version":3,"sources":["/Users/evik/Documents/GitHub/frontend/src/AuthService.js"],"names":["decode","AuthService","constructor","apiRoot","fetch","bind","login","getProfile","username","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","logout","removeItem","url","options","headers","_checkStatus","response","json","status","error","Error","statusText","Auth"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    constructor(apiRoot) {\n        this.apiRoot = apiRoot || 'https://better-profess.herokuapp.com/'\n        this.fetch = this.fetch.bind(this) \n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login(username, password) {\n       \n        return this.fetch(`${this.apiRoot}/login`, {\n            method: 'POST',\n            body: JSON.stringify({\n                username,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.token) \n            return Promise.resolve(res);\n        })\n    }\n\n    loggedIn() {\n        const token = this.getToken() \n        return !!token && !this.isTokenExpired(token) \n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { \n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken() {\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n\n    fetch(url, options) {\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n \n        if (response.status >= 200 && response.status < 300) { \n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}\n\nconst Auth = new AuthService();\nexport default Auth;"]},"metadata":{},"sourceType":"module"}